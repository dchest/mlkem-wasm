// src/build/wasm-module.js
async function MLKEM768Module(moduleArg = {}) {
  var moduleRtn;
  var Module = moduleArg;
  var ENVIRONMENT_IS_WEB = typeof window == "object";
  var ENVIRONMENT_IS_WORKER = typeof WorkerGlobalScope != "undefined";
  var ENVIRONMENT_IS_NODE = typeof process == "object" && process.versions?.node && process.type != "renderer";
  var _scriptName = import.meta.url;
  var scriptDirectory = "";
  var readAsync, readBinary;
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    try {
      scriptDirectory = new URL(".", _scriptName).href;
    } catch {
    }
    {
      if (ENVIRONMENT_IS_WORKER) {
        readBinary = (url) => {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.responseType = "arraybuffer";
          xhr.send(null);
          return new Uint8Array(xhr.response);
        };
      }
      readAsync = async (url) => {
        if (isFileURI(url)) {
          return new Promise((resolve, reject) => {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, true);
            xhr.responseType = "arraybuffer";
            xhr.onload = () => {
              if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                resolve(xhr.response);
                return;
              }
              reject(xhr.status);
            };
            xhr.onerror = reject;
            xhr.send(null);
          });
        }
        var response = await fetch(url, { credentials: "same-origin" });
        if (response.ok) {
          return response.arrayBuffer();
        }
        throw new Error(response.status + " : " + response.url);
      };
    }
  } else {
  }
  var out = console.log.bind(console);
  var err = console.error.bind(console);
  var wasmBinary;
  var ABORT = false;
  var isFileURI = (filename) => filename.startsWith("file://");
  var readyPromiseResolve, readyPromiseReject;
  var wasmMemory;
  var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
  var HEAP64, HEAPU64;
  var runtimeInitialized = false;
  function updateMemoryViews() {
    var b = wasmMemory.buffer;
    Module["HEAP8"] = HEAP8 = new Int8Array(b);
    HEAP16 = new Int16Array(b);
    Module["HEAPU8"] = HEAPU8 = new Uint8Array(b);
    HEAPU16 = new Uint16Array(b);
    HEAP32 = new Int32Array(b);
    HEAPU32 = new Uint32Array(b);
    HEAPF32 = new Float32Array(b);
    HEAPF64 = new Float64Array(b);
    HEAP64 = new BigInt64Array(b);
    HEAPU64 = new BigUint64Array(b);
  }
  function preRun() {
  }
  function initRuntime() {
    runtimeInitialized = true;
    wasmExports["b"]();
  }
  function postRun() {
  }
  function abort(what) {
    what = "Aborted(" + what + ")";
    err(what);
    ABORT = true;
    what += ". Build with -sASSERTIONS for more info.";
    var e = new WebAssembly.RuntimeError(what);
    readyPromiseReject?.(e);
    throw e;
  }
  var wasmBinaryFile;
  function findWasmBinary() {
    return base64Decode("");
  }
  function getBinarySync(file) {
    if (ArrayBuffer.isView(file)) {
      return file;
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw "both async and sync fetching of the wasm failed";
  }
  async function getWasmBinary(binaryFile) {
    return getBinarySync(binaryFile);
  }
  async function instantiateArrayBuffer(binaryFile, imports) {
    try {
      var binary = await getWasmBinary(binaryFile);
      var instance = await WebAssembly.instantiate(binary, imports);
      return instance;
    } catch (reason) {
      err(`failed to asynchronously prepare wasm: ${reason}`);
      abort(reason);
    }
  }
  async function instantiateAsync(binary, binaryFile, imports) {
    return instantiateArrayBuffer(binaryFile, imports);
  }
  function getWasmImports() {
    return { a: wasmImports };
  }
  async function createWasm() {
    function receiveInstance(instance, module) {
      wasmExports = instance.exports;
      wasmMemory = wasmExports["a"];
      updateMemoryViews();
      assignWasmExports(wasmExports);
      return wasmExports;
    }
    function receiveInstantiationResult(result2) {
      return receiveInstance(result2["instance"]);
    }
    var info = getWasmImports();
    wasmBinaryFile ??= findWasmBinary();
    var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
    var exports = receiveInstantiationResult(result);
    return exports;
  }
  class ExitStatus {
    name = "ExitStatus";
    constructor(status) {
      this.message = `Program terminated with exit(${status})`;
      this.status = status;
    }
  }
  var base64Decode = (b64) => {
    var b1, b2, i2 = 0, j = 0, bLength = b64.length;
    var output = new Uint8Array((bLength * 3 >> 2) - (b64[bLength - 2] == "=") - (b64[bLength - 1] == "="));
    for (; i2 < bLength; i2 += 4, j += 3) {
      b1 = base64ReverseLookup[b64.charCodeAt(i2 + 1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i2 + 2)];
      output[j] = base64ReverseLookup[b64.charCodeAt(i2)] << 2 | b1 >> 4;
      output[j + 1] = b1 << 4 | b2 >> 2;
      output[j + 2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i2 + 3)];
    }
    return output;
  };
  function getValue(ptr, type = "i8") {
    if (type.endsWith("*")) type = "*";
    switch (type) {
      case "i1":
        return HEAP8[ptr];
      case "i8":
        return HEAP8[ptr];
      case "i16":
        return HEAP16[ptr >> 1];
      case "i32":
        return HEAP32[ptr >> 2];
      case "i64":
        return HEAP64[ptr >> 3];
      case "float":
        return HEAPF32[ptr >> 2];
      case "double":
        return HEAPF64[ptr >> 3];
      case "*":
        return HEAPU32[ptr >> 2];
      default:
        abort(`invalid type for getValue: ${type}`);
    }
  }
  function setValue(ptr, value, type = "i8") {
    if (type.endsWith("*")) type = "*";
    switch (type) {
      case "i1":
        HEAP8[ptr] = value;
        break;
      case "i8":
        HEAP8[ptr] = value;
        break;
      case "i16":
        HEAP16[ptr >> 1] = value;
        break;
      case "i32":
        HEAP32[ptr >> 2] = value;
        break;
      case "i64":
        HEAP64[ptr >> 3] = BigInt(value);
        break;
      case "float":
        HEAPF32[ptr >> 2] = value;
        break;
      case "double":
        HEAPF64[ptr >> 3] = value;
        break;
      case "*":
        HEAPU32[ptr >> 2] = value;
        break;
      default:
        abort(`invalid type for setValue: ${type}`);
    }
  }
  var stackRestore = (val) => __emscripten_stack_restore(val);
  var stackSave = () => _emscripten_stack_get_current();
  var stackAlloc = (sz) => __emscripten_stack_alloc(sz);
  for (var base64ReverseLookup = new Uint8Array(123), i = 25; i >= 0; --i) {
    base64ReverseLookup[48 + i] = 52 + i;
    base64ReverseLookup[65 + i] = i;
    base64ReverseLookup[97 + i] = 26 + i;
  }
  base64ReverseLookup[43] = 62;
  base64ReverseLookup[47] = 63;
  {
  }
  Module["stackSave"] = stackSave;
  Module["stackRestore"] = stackRestore;
  Module["stackAlloc"] = stackAlloc;
  Module["setValue"] = setValue;
  Module["getValue"] = getValue;
  var _mlkem768_keypair_derand, _mlkem768_enc_derand, _mlkem768_dec, __emscripten_stack_restore, __emscripten_stack_alloc, _emscripten_stack_get_current;
  function assignWasmExports(wasmExports2) {
    Module["_mlkem768_keypair_derand"] = _mlkem768_keypair_derand = wasmExports2["c"];
    Module["_mlkem768_enc_derand"] = _mlkem768_enc_derand = wasmExports2["d"];
    Module["_mlkem768_dec"] = _mlkem768_dec = wasmExports2["e"];
    __emscripten_stack_restore = wasmExports2["f"];
    __emscripten_stack_alloc = wasmExports2["g"];
    _emscripten_stack_get_current = wasmExports2["h"];
  }
  var wasmImports = {};
  function run() {
    preRun();
    function doRun() {
      Module["calledRun"] = true;
      if (ABORT) return;
      initRuntime();
      readyPromiseResolve?.(Module);
      postRun();
    }
    {
      doRun();
    }
  }
  var wasmExports;
  wasmExports = await createWasm();
  run();
  if (runtimeInitialized) {
    moduleRtn = Module;
  } else {
    moduleRtn = new Promise((resolve, reject) => {
      readyPromiseResolve = resolve;
      readyPromiseReject = reject;
    });
  }
  ;
  return moduleRtn;
}
var wasm_module_default = MLKEM768Module;

// src/mlkem.ts
var ALGORITHM_NAME = "ML-KEM-768";
var JWK_ALG = "MLKEM768";
var KEY_USAGES = [
  "encapsulateKey",
  "encapsulateBits",
  "decapsulateKey",
  "decapsulateBits"
];
var MlKemOperationError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "OperationError";
  }
};
var MlKemInvalidAccessError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "InvalidAccessError";
  }
};
var MlKemNotSupportedError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "NotSupportedError";
  }
};
var MlKemDataError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DataError";
  }
};
var internalKeyData = /* @__PURE__ */ new WeakMap();
function getInternalKeyData(key) {
  const keyData = internalKeyData.get(key);
  if (!keyData) {
    throw new TypeError("Unknown key object");
  }
  return keyData;
}
var cleanupRegistry = new FinalizationRegistry((keyData) => {
  keyData.publicKeyData.fill(0);
  keyData.privateSeedData?.fill(0);
  keyData.privateSecretKeyData?.fill(0);
});
function getPublicKeyDataRef(key) {
  const keyData = getInternalKeyData(key);
  if (!keyData.publicKeyData) {
    throw new MlKemOperationError("Failed to get public key data");
  }
  return keyData.publicKeyData;
}
function getPrivateKeyDataRef(key) {
  const keyData = getInternalKeyData(key);
  if (!keyData.privateSeedData || !keyData.privateSecretKeyData) {
    throw new MlKemOperationError("Failed to get private key data");
  }
  return keyData;
}
var noClone = Symbol("CryptoKey created by mlkem-wasm cannot be cloned");
var keyIdKey = "_mlkem_wasm";
var emptyToJSON = () => ({});
function createKeyObject(type, extractable, usages, keyData) {
  const key = {
    type,
    extractable,
    algorithm: Object.freeze({ name: ALGORITHM_NAME }),
    usages: Object.freeze(Array.from(usages)),
    [keyIdKey]: noClone
    // to prevent structured cloning
  };
  Object.defineProperty(key, "toJSON", {
    value: emptyToJSON,
    writable: false,
    enumerable: false,
    configurable: false
  });
  Object.setPrototypeOf(key, CryptoKey.prototype);
  internalKeyData.set(key, keyData);
  cleanupRegistry.register(key, keyData);
  return Object.freeze(key);
}
function createPublicKey(publicKeyData, usages) {
  return createKeyObject("public", true, usages, { publicKeyData });
}
function createPrivateKey(publicKeyData, privateSeedData, privateSecretKeyData, extractable, usages) {
  return createKeyObject("private", extractable, usages, {
    publicKeyData,
    privateSeedData,
    privateSecretKeyData
  });
}
function _isSupportedCryptoKey(key) {
  return key instanceof CryptoKey && keyIdKey in key && key[keyIdKey] == noClone && internalKeyData.has(key);
}
function toBase64url(data) {
  return btoa(String.fromCharCode(...data)).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
}
function fromBase64url(base64url) {
  const base64 = base64url.replace(/-/g, "+").replace(/_/g, "/");
  const binary = atob(base64 + "===".slice((base64.length + 3) % 4));
  return Uint8Array.from(binary, (c) => c.charCodeAt(0));
}
var PUBLICKEY_BYTES = 1184;
var SECRETKEY_BYTES = 2400;
var CIPHERTEXT_BYTES = 1088;
var SHARED_SECRET_BYTES = 32;
var KEYPAIR_RANDOM_BYTES = 64;
var ENC_RANDOM_BYTES = 32;
var _module;
async function getModule() {
  if (!_module) {
    _module = await wasm_module_default();
  }
  return _module;
}
var getRandomValues = crypto.getRandomValues.bind(crypto);
function checkAlgorithm(algorithm) {
  const name = typeof algorithm === "string" ? algorithm.toUpperCase() : typeof algorithm === "object" && algorithm !== null && "name" in algorithm && typeof algorithm.name === "string" ? algorithm.name.toUpperCase() : null;
  if (name !== ALGORITHM_NAME) {
    throw new TypeError("Unsupported algorithm");
  }
}
async function internalGenerateKeyPair(coins) {
  const module = await getModule();
  const stackSave = module.stackSave();
  try {
    const pkPtr = module.stackAlloc(PUBLICKEY_BYTES);
    const skPtr = module.stackAlloc(SECRETKEY_BYTES);
    const coinsPtr = module.stackAlloc(KEYPAIR_RANDOM_BYTES);
    module.HEAPU8.set(coins, coinsPtr);
    const result = module._mlkem768_keypair_derand(pkPtr, skPtr, coinsPtr);
    if (result !== 0) {
      throw new MlKemOperationError("Key generation failed");
    }
    const rawPublicKey = new Uint8Array(PUBLICKEY_BYTES);
    const rawSecretKey = new Uint8Array(SECRETKEY_BYTES);
    const rawSeed = new Uint8Array(coins);
    rawPublicKey.set(module.HEAPU8.subarray(pkPtr, pkPtr + PUBLICKEY_BYTES));
    rawSecretKey.set(module.HEAPU8.subarray(skPtr, skPtr + SECRETKEY_BYTES));
    module.HEAPU8.fill(0, pkPtr, pkPtr + PUBLICKEY_BYTES);
    module.HEAPU8.fill(0, skPtr, skPtr + SECRETKEY_BYTES);
    module.HEAPU8.fill(0, coinsPtr, coinsPtr + KEYPAIR_RANDOM_BYTES);
    return { rawPublicKey, rawSecretKey, rawSeed };
  } finally {
    module.stackRestore(stackSave);
  }
}
async function generateKey(keyAlgorithm, extractable, usages) {
  checkAlgorithm(keyAlgorithm);
  if (!Array.isArray(usages) || usages.some((usage) => !KEY_USAGES.includes(usage))) {
    throw new SyntaxError("Invalid key usages");
  }
  const { rawPublicKey, rawSecretKey, rawSeed } = await internalGenerateKeyPair(
    getRandomValues(new Uint8Array(KEYPAIR_RANDOM_BYTES))
  );
  const publicKey = createPublicKey(
    rawPublicKey,
    usages.filter(
      (usage) => usage === "encapsulateKey" || usage === "encapsulateBits"
    )
  );
  const privateKey = createPrivateKey(
    rawPublicKey,
    rawSeed,
    rawSecretKey,
    extractable,
    usages.filter(
      (usage) => usage === "decapsulateKey" || usage === "decapsulateBits"
    )
  );
  return {
    publicKey,
    privateKey
  };
}
async function exportKey(format, key) {
  if (!(key instanceof CryptoKey)) {
    throw new TypeError("Expected key to be an instance of CryptoKey");
  }
  checkAlgorithm(key.algorithm);
  if (!key.extractable) {
    throw new MlKemOperationError("Key is not extractable");
  }
  if (format === "spki") {
    if (key.type !== "public") {
      throw new TypeError("Expected key type to be 'public'");
    }
    return rawToDer(MLKEM768_SPKI, getPublicKeyDataRef(key)).buffer;
  }
  if (format === "pkcs8") {
    if (key.type !== "private") {
      throw new MlKemInvalidAccessError("Expected key type to be 'private'");
    }
    return rawToDer(MLKEM768_PKCS8, getPrivateKeyDataRef(key).privateSeedData).buffer;
  }
  if (format === "raw-public") {
    if (key.type !== "public") {
      throw new TypeError("Expected key type to be 'public'");
    }
    return new Uint8Array(getPublicKeyDataRef(key)).buffer;
  }
  if (format === "raw-seed") {
    if (key.type !== "private") {
      throw new MlKemInvalidAccessError("Expected key type to be 'private'");
    }
    return new Uint8Array(getPrivateKeyDataRef(key).privateSeedData).buffer;
  }
  if (format === "jwk") {
    const jwk = {
      // 2.2. Set the kty attribute of jwk to "AKP".
      kty: "AKP",
      // 2.3. Set the alg attribute of jwk to the alg value corresponding to
      // the name member of normalizedAlgorithm indicated in Section 8 of
      // [draft-ietf-jose-pqc-kem-01] (Figure 1).
      alg: JWK_ALG,
      // 2.4. Set the pub attribute of jwk to the base64url encoded public
      // key corresponding to the [[handle]] internal slot of key.
      pub: toBase64url(getPublicKeyDataRef(key))
    };
    if (key.type === "private") {
      jwk.priv = toBase64url(getPrivateKeyDataRef(key).privateSeedData);
    }
    jwk.key_ops = key.usages;
    jwk.ext = key.extractable;
    return jwk;
  }
  throw new MlKemNotSupportedError("Format not supported");
}
function bufferSourcetoUint8Array(value) {
  if (ArrayBuffer.isView(value) && value.buffer instanceof ArrayBuffer) {
    return new Uint8Array(value.buffer, value.byteOffset, value.byteLength);
  } else if (value instanceof ArrayBuffer) {
    return new Uint8Array(value);
  } else {
    throw new TypeError("Value must be a BufferSource");
  }
}
function bufferSourcetoUint8ArrayCopy(value) {
  return bufferSourcetoUint8Array(value).slice();
}
var MLKEM768_SPKI = {
  fullLength: 1206,
  prefix: new Uint8Array([
    48,
    130,
    4,
    178,
    48,
    11,
    6,
    9,
    96,
    134,
    72,
    1,
    101,
    3,
    4,
    4,
    2,
    3,
    130,
    4,
    161,
    0
  ])
};
var MLKEM768_PKCS8 = {
  fullLength: 86,
  prefix: new Uint8Array([
    48,
    84,
    2,
    1,
    0,
    48,
    11,
    6,
    9,
    96,
    134,
    72,
    1,
    101,
    3,
    4,
    4,
    2,
    4,
    66,
    128,
    64
  ])
};
function bytesEqual(a, b) {
  if (a.length !== b.length) {
    return false;
  }
  let diff = 0;
  for (let i = 0; i < a.length; i++) {
    diff |= a[i] ^ b[i];
  }
  return diff === 0;
}
function derToRaw(encoding, der) {
  if (der.length !== encoding.fullLength) {
    throw new MlKemDataError("Invalid encoding");
  }
  const prefix = der.subarray(0, encoding.prefix.length);
  if (!bytesEqual(prefix, encoding.prefix)) {
    throw new MlKemNotSupportedError("Unsupported encoding");
  }
  return der.slice(encoding.prefix.length);
}
function rawToDer(encoding, raw) {
  const der = new Uint8Array(encoding.fullLength);
  der.set(encoding.prefix);
  der.set(raw, encoding.prefix.length);
  return der;
}
async function importKey(format, keyData, algorithm, extractable, usages) {
  checkAlgorithm(algorithm);
  if (format === "spki") {
    if (!Array.isArray(usages) || usages.some(
      (usage) => usage !== "encapsulateKey" && usage !== "encapsulateBits"
    )) {
      throw new SyntaxError("Invalid key usages for public key");
    }
    const data = derToRaw(MLKEM768_SPKI, bufferSourcetoUint8Array(keyData));
    if (data.length !== PUBLICKEY_BYTES) {
      throw new MlKemDataError("Invalid key length");
    }
    return createPublicKey(data, usages);
  }
  if (format === "pkcs8") {
    if (!Array.isArray(usages) || usages.some(
      (usage) => usage !== "decapsulateKey" && usage !== "decapsulateBits"
    )) {
      throw new SyntaxError("Invalid key usages for private key");
    }
    const data = derToRaw(MLKEM768_PKCS8, bufferSourcetoUint8Array(keyData));
    if (data.length !== KEYPAIR_RANDOM_BYTES) {
      throw new MlKemDataError("Invalid key length");
    }
    const { rawPublicKey, rawSecretKey, rawSeed } = await internalGenerateKeyPair(data);
    return createPrivateKey(
      rawPublicKey,
      rawSeed,
      rawSecretKey,
      extractable,
      usages
    );
  }
  if (format === "raw-public") {
    if (!Array.isArray(usages) || usages.some(
      (usage) => usage !== "encapsulateKey" && usage !== "encapsulateBits"
    )) {
      throw new SyntaxError("Invalid key usages for public key");
    }
    const data = bufferSourcetoUint8ArrayCopy(keyData);
    return createPublicKey(data, usages);
  }
  if (format === "raw-seed") {
    if (!Array.isArray(usages) || usages.some(
      (usage) => usage !== "decapsulateKey" && usage !== "decapsulateBits"
    )) {
      throw new SyntaxError("Invalid key usages for private key");
    }
    const data = bufferSourcetoUint8ArrayCopy(keyData);
    if (data.length !== KEYPAIR_RANDOM_BYTES) {
      throw new MlKemDataError("Invalid key length");
    }
    const { rawPublicKey, rawSecretKey, rawSeed } = await internalGenerateKeyPair(data);
    return createPrivateKey(
      rawPublicKey,
      rawSeed,
      rawSecretKey,
      extractable,
      usages
    );
  }
  if (format === "jwk") {
    if (typeof keyData !== "object" || keyData === null) {
      throw new MlKemDataError(
        "Expected keyData to be a JsonWebKey dictionary"
      );
    }
    const jwk = keyData;
    if (jwk.priv && usages.some(
      (usage) => usage !== "decapsulateKey" && usage !== "decapsulateBits"
    )) {
      throw new SyntaxError("Invalid key usages for private key");
    }
    if (!jwk.priv && usages.some(
      (usage) => usage !== "encapsulateKey" && usage !== "encapsulateBits"
    )) {
      throw new SyntaxError("Invalid key usages for public key");
    }
    if (jwk.kty !== "AKP") {
      throw new MlKemDataError("Invalid key type");
    }
    if (jwk.alg !== JWK_ALG && jwk.alg !== "ML-KEM-768+A192KW") {
      throw new MlKemDataError("Invalid algorithm");
    }
    if (usages.length > 0 && jwk.use && jwk.use !== "enc") {
      throw new MlKemDataError("Invalid key usage");
    }
    if (jwk.key_ops && Array.isArray(jwk.key_ops) && !Array.prototype.every.call(
      jwk.key_ops,
      (op) => KEY_USAGES.includes(op)
    ) || !Array.isArray(jwk.key_ops)) {
      throw new MlKemDataError("Invalid key operations");
    }
    if (jwk.ext === false && extractable) {
      throw new MlKemDataError("Invalid key extractability");
    }
    if (jwk.priv) {
      try {
        const seedData = fromBase64url(jwk.priv);
        if (seedData.length !== KEYPAIR_RANDOM_BYTES) {
          throw new MlKemDataError("Invalid private key length");
        }
        const { rawPublicKey, rawSecretKey, rawSeed } = await internalGenerateKeyPair(seedData);
        const key = createPrivateKey(
          rawPublicKey,
          rawSeed,
          rawSecretKey,
          extractable,
          usages
        );
        if (toBase64url(rawPublicKey) !== jwk.pub) {
          throw new MlKemDataError("Invalid public key data");
        }
        return key;
      } catch {
        throw new MlKemDataError("Invalid private key format");
      }
    } else {
      try {
        const publicKeyData = fromBase64url(jwk.pub);
        if (publicKeyData.length !== PUBLICKEY_BYTES) {
          throw new MlKemDataError("Invalid public key data");
        }
        return createPublicKey(publicKeyData, usages);
      } catch {
        throw new MlKemDataError("Invalid public key format");
      }
    }
  }
  throw new MlKemNotSupportedError("Unsupported key format");
}
async function getPublicKey(key, usages) {
  if (!(key instanceof CryptoKey)) {
    throw new TypeError("Expected key to be an instance of CryptoKey");
  }
  checkAlgorithm(key.algorithm);
  if (key.type !== "private") {
    throw new MlKemInvalidAccessError("Expected key type to be 'private'");
  }
  if (!Array.isArray(usages) || usages.some(
    (usage) => usage !== "encapsulateKey" && usage !== "encapsulateBits"
  )) {
    throw new SyntaxError("Invalid key usages");
  }
  const keyData = getInternalKeyData(key);
  if (!keyData.publicKeyData) {
    throw new MlKemOperationError("Failed to get public key data");
  }
  return createPublicKey(new Uint8Array(keyData.publicKeyData), usages);
}
async function internalEncapsulate(algorithm, encapsulationKey, usage) {
  const module = await getModule();
  checkAlgorithm(algorithm);
  if (!(encapsulationKey instanceof CryptoKey) || encapsulationKey.type !== "public") {
    throw new MlKemInvalidAccessError(
      "Expected publicKey to be an instance of MlKemCryptoKey with type 'public'"
    );
  }
  if (!encapsulationKey.usages.includes(usage)) {
    throw new MlKemInvalidAccessError(`Key usages don't include '${usage}'`);
  }
  const publicKeyData = getPublicKeyDataRef(encapsulationKey);
  if (publicKeyData.length !== PUBLICKEY_BYTES) {
    throw new MlKemOperationError("Invalid public key length");
  }
  const coins = getRandomValues(new Uint8Array(ENC_RANDOM_BYTES));
  const stackSave = module.stackSave();
  try {
    const pkPtr = module.stackAlloc(PUBLICKEY_BYTES);
    const ctPtr = module.stackAlloc(CIPHERTEXT_BYTES);
    const ssPtr = module.stackAlloc(SHARED_SECRET_BYTES);
    const coinsPtr = module.stackAlloc(ENC_RANDOM_BYTES);
    module.HEAPU8.set(publicKeyData, pkPtr);
    module.HEAPU8.set(coins, coinsPtr);
    const result = module._mlkem768_enc_derand(ctPtr, ssPtr, pkPtr, coinsPtr);
    if (result !== 0) {
      throw new MlKemOperationError("Encapsulation failed");
    }
    const ciphertext = new Uint8Array(CIPHERTEXT_BYTES);
    const sharedKey = new Uint8Array(SHARED_SECRET_BYTES);
    ciphertext.set(module.HEAPU8.subarray(ctPtr, ctPtr + CIPHERTEXT_BYTES));
    sharedKey.set(module.HEAPU8.subarray(ssPtr, ssPtr + SHARED_SECRET_BYTES));
    module.HEAPU8.fill(0, ctPtr, ctPtr + CIPHERTEXT_BYTES);
    module.HEAPU8.fill(0, ssPtr, ssPtr + SHARED_SECRET_BYTES);
    module.HEAPU8.fill(0, pkPtr, pkPtr + PUBLICKEY_BYTES);
    module.HEAPU8.fill(0, coinsPtr, coinsPtr + ENC_RANDOM_BYTES);
    return {
      ciphertext: ciphertext.buffer,
      sharedKey: sharedKey.buffer
    };
  } finally {
    module.stackRestore(stackSave);
  }
}
async function encapsulateBits(algorithm, encapsulationKey) {
  return internalEncapsulate(algorithm, encapsulationKey, "encapsulateBits");
}
async function encapsulateKey(encapsulationAlgorithm, encapsulationKey, sharedKeyAlgorithm, extractable, usages) {
  const { sharedKey: sharedKeyBits, ciphertext } = await internalEncapsulate(
    encapsulationAlgorithm,
    encapsulationKey,
    "encapsulateKey"
  );
  const sharedKey = await crypto.subtle.importKey(
    "raw",
    sharedKeyBits,
    sharedKeyAlgorithm,
    extractable,
    usages
  );
  return {
    sharedKey,
    ciphertext
  };
}
async function internalDecapsulate(algorithm, decapsulationKey, ciphertext, usage) {
  const module = await getModule();
  checkAlgorithm(algorithm);
  if (!(decapsulationKey instanceof CryptoKey) || decapsulationKey.type !== "private") {
    throw new MlKemInvalidAccessError(
      "Expected key to be an instance of MlKemCryptoKey with type 'private'"
    );
  }
  if (!decapsulationKey.usages.includes(usage)) {
    throw new MlKemInvalidAccessError(`Key usages don't include '${usage}'`);
  }
  const secretKeyData = getPrivateKeyDataRef(decapsulationKey).privateSecretKeyData;
  if (!secretKeyData || secretKeyData.length !== SECRETKEY_BYTES) {
    throw new Error("Invalid secret key length");
  }
  const ct = bufferSourcetoUint8Array(ciphertext);
  if (ct.length !== CIPHERTEXT_BYTES) {
    throw new MlKemOperationError("Invalid ciphertext length");
  }
  const stackSave = module.stackSave();
  try {
    const ctPtr = module.stackAlloc(CIPHERTEXT_BYTES);
    const skPtr = module.stackAlloc(SECRETKEY_BYTES);
    const ssPtr = module.stackAlloc(SHARED_SECRET_BYTES);
    module.HEAPU8.set(ct, ctPtr);
    module.HEAPU8.set(secretKeyData, skPtr);
    const result = module._mlkem768_dec(ssPtr, ctPtr, skPtr);
    if (result !== 0) {
      throw new MlKemOperationError("Decapsulation failed");
    }
    const sharedKey = new Uint8Array(SHARED_SECRET_BYTES);
    sharedKey.set(module.HEAPU8.subarray(ssPtr, ssPtr + SHARED_SECRET_BYTES));
    module.HEAPU8.fill(0, ctPtr, ctPtr + CIPHERTEXT_BYTES);
    module.HEAPU8.fill(0, skPtr, skPtr + SECRETKEY_BYTES);
    module.HEAPU8.fill(0, ssPtr, ssPtr + SHARED_SECRET_BYTES);
    return sharedKey.buffer;
  } finally {
    module.stackRestore(stackSave);
  }
}
async function decapsulateBits(decapsulationAlgorithm, decapsulationKey, ciphertext) {
  return internalDecapsulate(
    decapsulationAlgorithm,
    decapsulationKey,
    ciphertext,
    "decapsulateBits"
  );
}
async function decapsulateKey(decapsulationAlgorithm, decapsulationKey, ciphertext, sharedKeyAlgorithm, extractable, usages) {
  const sharedKeyBits = await internalDecapsulate(
    decapsulationAlgorithm,
    decapsulationKey,
    ciphertext,
    "decapsulateKey"
  );
  const sharedKey = await crypto.subtle.importKey(
    "raw",
    sharedKeyBits,
    sharedKeyAlgorithm,
    extractable,
    usages
  );
  return sharedKey;
}
var mlkem = {
  generateKey,
  exportKey,
  importKey,
  getPublicKey,
  encapsulateBits,
  encapsulateKey,
  decapsulateBits,
  decapsulateKey,
  _isSupportedCryptoKey
};
var mlkem_default = mlkem;
export {
  mlkem_default as default
};
